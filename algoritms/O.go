package algoritms

import (
	"fmt"
	"math"
	"runtime"
)

const (
	isTraceEnabled = true
)

func Run() {
	o()
	linkedListVsArrays()
	selectionSort()
}

func o() {
	printHeader("О большое")
	// логарифм x по основанию y
	// log(x, y)
	// число, в степень которого нужно возвести x что бы получить y

	// log(2, 16) == 4
	// т.е. что бы получить 16, 2 нужно возвести в 4 степень
	printLineTrace()
	l := math.Log2(16)
	fmt.Println(l)
	// О "о большое" - описывает скорость работы алгоритма
	// O(n) - n это кол-во операций
	// в операциях (насколько быстро возрастает время выполенения аогоритма)
	// О описывает худший случай.
	// например, алгоритм простого поиска может занять как 0(1) так и  О(n)
	// но сложность работы такого алгоритма запишут именно как O(n)
	// когда используется запись О(log n) всегда имеется ввиду
	// логарифм по основанию 2

	// типичные примеры О
	// О(log n)      - логарифмическое время (бинарный поиск)
	// O(n)          - линейное время (простой поиск)
	// O(n * log n)  - эффективные алгоритмы сортировки, например, быстрая сортировка
	// O(n^2)        - медленные алгоритмы сортировки (сортировка выбором)
	// O(n!)         - очень медленные алгоритмы (задача о комивяжере)

	// существуют и другие варианты времени выполнения, но эти встречаются чаще всего

}

func linkedListVsArrays() {
	printHeader("Массивы и связанные списки")
	printLineTrace()
	// массивы содержаться в памяти неразрывно

	// связанный список же содержит в каждом эелементе адрес следующего
	// отсюда следует, что
	// только для чтения лучше массив(чтение занимает О(1)
	// Вставка и удаление быстрее происходят из списка O(1), потому что достаточно изменить указатель
	//     на следующий элемент
	//     а в случае массивов, придется сдвигать все последующие элементы (менять их индекс)
}

func selectionSort() {
	printHeader("Сортировка выбором")
	printLineTrace()
	// суть в то, что находится набиольший (или наименьший эелемнт)
	// а затем добавляется в список
}


func printLineTrace() {
	if !isTraceEnabled {
		return
	}
	_, fn, line, _ := runtime.Caller(1)
	fmt.Printf("%s:%d\n", fn, line)
	fmt.Println("-----------------------------")
}

func printHeader(h string) {
	_, fn, line, _ := runtime.Caller(1)
	l := fmt.Sprintf("%s:%d\n", fn, line)
	fmt.Printf("|%s|: %s\n", h, l)
}