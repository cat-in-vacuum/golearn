package theory

// как правило, разработчиками пишется два вида тестов:
// -- интеграционные
// -- модульные (юнит тесты)
//
//  Модульные тесты подразумевают, что тестироваться будут отедельные модули программы
//  а не их поведение в связке с другими модулями
//  В первую очерь это важно для того, что бы быть уверенным, что новый ф-ционал не сломал ожидаемое поведение других
//  частей/методов модуля.
//	Из недостатков можно отметить, что меняя поведение метода/модуля нужно переписывать сами тесты

//  Интеграционные тесты нужны что бы как раз так проверить взаимодействие между различными компонентами программы
//  В том числе и взаимодействие с внешними АПИ и ресрусами, такими как БД.
//  Например, тестирование хттп сервера, его контролелров, кодов ответа и есть интеграционное тестирование.
//
//  Недостатки инеграционных тестов:
//   - сложность написания
//   - скорость и нестабильнотсь тестирования

//  При написании интеграционных тестов зависимости можно закрывать моками. Моки в го реализуются при помощи инетрфейсов.
//  В этом случае нужно учитывать, что все зависимости тестируемой части программы тоже должы переданны как
//  интерфейсы.
//
//  Мок - своего рода заглушка, которая иммитриует поведение зависимости и при создании экземпляра тестируемой штуки
//  вместо зависимости мы передаем мок, которые поставляет "фейковые" данные или поведение.
//
//  Важным понятием в тестировании является изоляция тестов.
//  Это по-сути тот же самый принцип, что и при написании кода. Тесты не должны зависеть от других тестов и быть
//  как можно меньше связанными между собой.

